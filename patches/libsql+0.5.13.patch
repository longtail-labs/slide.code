diff --git a/node_modules/libsql/.DS_Store b/node_modules/libsql/.DS_Store
new file mode 100644
index 0000000..9e99537
Binary files /dev/null and b/node_modules/libsql/.DS_Store differ
diff --git a/node_modules/libsql/index.js b/node_modules/libsql/index.js
index 9ac15cc..f4850dd 100644
--- a/node_modules/libsql/index.js
+++ b/node_modules/libsql/index.js
@@ -2,6 +2,8 @@
 
 const { load, currentTarget } = require("@neon-rs/load");
 const { familySync, GLIBC, MUSL } = require("detect-libc");
+const fs = require("fs");
+const path = require("path");
 
 function requireNative() {
   if (process.env.LIBSQL_JS_DEV) {
@@ -23,6 +25,31 @@ function requireNative() {
   if (target === "linux-arm-gnueabihf" && familySync() == MUSL) {
       target = "linux-arm-musleabihf";
   }
+
+  // Check for bundled modules first
+  try {
+    // Try bundled_modules path first
+    let bundledPath = path.join(__dirname, "..", "..", "bundled_modules", "libsql", target, "index.node");
+    
+    // If not found and we have resourcesPath, try that
+    if (!fs.existsSync(bundledPath) && process.resourcesPath) {
+      const resourcePath = path.join(process.resourcesPath, "bundled_modules", "libsql", target, "index.node");
+      if (fs.existsSync(resourcePath)) {
+        bundledPath = resourcePath;
+      }
+    }
+    
+    // If bundled module exists, load it directly
+    if (fs.existsSync(bundledPath)) {
+      const nativeModule = { exports: {} };
+      process.dlopen(nativeModule, bundledPath);
+      return nativeModule.exports;
+    }
+  } catch (e) {
+    // Ignore errors and fall back to original behavior
+  }
+
+  // Fall back to original behavior
   return require(`@libsql/${target}`);
 }
 
