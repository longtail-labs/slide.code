name: Version Tag Release

on:
  push:
    tags:
      - 'v*.*.*'
  # Allow manual triggering
  workflow_dispatch:

jobs:
  create-release:
    name: Create Release for Version
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: useblacksmith/setup-node@v5
        with:
          node-version: '22'

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Install Dependencies
        run: npm install

      - name: Build Repo
        run: |
          npm run build:prod

      - name: Prepare Signing Certificates
        run: |
          mkdir -p build
          echo "${{ secrets.APPLE_CERT }}" | base64 --decode > build/apple.cer
          # echo "${{ secrets.WINDOWS_CERT }}" | base64 --decode > build/windows.cer
          echo "${{ secrets.APPLE_NOTARIZATION_PRIVATE_KEY }}" > AuthKey_W442ZA3W3A.p8

      - name: Setup build environment
        run: |
          npm run make:prod
        env:
          VITE_APTABASE_APP_KEY: ${{ secrets.VITE_APTABASE_APP_KEY }}

      - name: Update package.json with release version
        run: |
          # Update package.json with the release version using npm pkg
          npm pkg set version="${{ steps.get_version.outputs.VERSION }}"

      # Check if a release already exists
      - name: Check for existing release
        id: check_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: context.ref.replace('refs/tags/', '')
              });
              return true;
            } catch (error) {
              if (error.status === 404) return false;
              throw error;
            }
        continue-on-error: true

      - name: Run Conveyor for Release Build
        uses: hydraulic-software/conveyor/actions/build@v18.1
        env:
          APPLE_ASP: ${{ secrets.APPLE_ASP }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SITE_RELEASE_TOKEN: ${{ secrets.SITE_RELEASE_TOKEN }}
          NODE_ENV: production
          ENV: production
          MODE: production
          BUILD_VERSION: ${{ steps.get_version.outputs.VERSION }}
          VITE_APTABASE_APP_KEY: ${{ secrets.VITE_APTABASE_APP_KEY }}
          APPLE_NOTARIZATION_ISSUER_ID: ${{ secrets.APPLE_NOTARIZATION_ISSUER_ID }}
          APPLE_NOTARIZATION_KEY_ID: ${{ secrets.APPLE_NOTARIZATION_KEY_ID }}
          APPLE_NOTARIZATION_PRIVATE_KEY: ${{ secrets.APPLE_NOTARIZATION_PRIVATE_KEY }}
          APPLE_NOTARIZATION_PRIVATE_KEY_PATH: AuthKey_W442ZA3W3A.p8
          MAC_CERTIFICATE_PATH: build/apple.cer
          # WINDOWS_CERTIFICATE_PATH: build/windows.cer
        with:
          command: make copied-site
          signing_key: ${{ secrets.SIGNING_KEY }}
          extra_flags: -f conveyor.release.conf
          agree_to_license: 1

      - name: Restore Original Node Modules
        run: |
          echo "üîÑ Restoring original node_modules..."
          if [ -d "node_modules.bk" ]; then
            # Remove any node_modules directory that might have been created
            if [ -d "node_modules" ]; then
              rm -rf node_modules
            fi
            mv node_modules.bk node_modules
            echo "‚úÖ Node modules restored successfully"
          else
            echo "‚ö†Ô∏è Warning: node_modules.bk not found for restoration"
          fi
