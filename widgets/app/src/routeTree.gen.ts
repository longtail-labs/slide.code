/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WorkingTaskIdRouteImport } from './routes/working/$taskId'

const WatchLazyRouteImport = createFileRoute('/watch')()
const ReadLazyRouteImport = createFileRoute('/read')()
const GameLazyRouteImport = createFileRoute('/game')()
const AboutLazyRouteImport = createFileRoute('/about')()

const WatchLazyRoute = WatchLazyRouteImport.update({
  id: '/watch',
  path: '/watch',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/watch.lazy').then((d) => d.Route))
const ReadLazyRoute = ReadLazyRouteImport.update({
  id: '/read',
  path: '/read',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/read.lazy').then((d) => d.Route))
const GameLazyRoute = GameLazyRouteImport.update({
  id: '/game',
  path: '/game',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/game.lazy').then((d) => d.Route))
const AboutLazyRoute = AboutLazyRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkingTaskIdRoute = WorkingTaskIdRouteImport.update({
  id: '/working/$taskId',
  path: '/working/$taskId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutLazyRoute
  '/game': typeof GameLazyRoute
  '/read': typeof ReadLazyRoute
  '/watch': typeof WatchLazyRoute
  '/working/$taskId': typeof WorkingTaskIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutLazyRoute
  '/game': typeof GameLazyRoute
  '/read': typeof ReadLazyRoute
  '/watch': typeof WatchLazyRoute
  '/working/$taskId': typeof WorkingTaskIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutLazyRoute
  '/game': typeof GameLazyRoute
  '/read': typeof ReadLazyRoute
  '/watch': typeof WatchLazyRoute
  '/working/$taskId': typeof WorkingTaskIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/game' | '/read' | '/watch' | '/working/$taskId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/game' | '/read' | '/watch' | '/working/$taskId'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/game'
    | '/read'
    | '/watch'
    | '/working/$taskId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutLazyRoute: typeof AboutLazyRoute
  GameLazyRoute: typeof GameLazyRoute
  ReadLazyRoute: typeof ReadLazyRoute
  WatchLazyRoute: typeof WatchLazyRoute
  WorkingTaskIdRoute: typeof WorkingTaskIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/watch': {
      id: '/watch'
      path: '/watch'
      fullPath: '/watch'
      preLoaderRoute: typeof WatchLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/read': {
      id: '/read'
      path: '/read'
      fullPath: '/read'
      preLoaderRoute: typeof ReadLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/game': {
      id: '/game'
      path: '/game'
      fullPath: '/game'
      preLoaderRoute: typeof GameLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/working/$taskId': {
      id: '/working/$taskId'
      path: '/working/$taskId'
      fullPath: '/working/$taskId'
      preLoaderRoute: typeof WorkingTaskIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutLazyRoute: AboutLazyRoute,
  GameLazyRoute: GameLazyRoute,
  ReadLazyRoute: ReadLazyRoute,
  WatchLazyRoute: WatchLazyRoute,
  WorkingTaskIdRoute: WorkingTaskIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
